import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    }
}

plugins {
    id 'nebula.lint' version '8.3.1'
    id 'nebula.info' version '3.6.0'

    id 'me.champeau.gradle.jmh' version '0.4.3'
    id 'net.ltgt.errorprone' version '0.0.13'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

subprojects {

}

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "org.jabref"
    version = "4.2-dev"

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }

    // linter for gradle - documentation: https://github.com/nebula-plugins/gradle-lint-plugin/wiki
    apply plugin: 'nebula.lint'
    gradleLint.rules = ['all-dependency']

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.8'
    }

    // Code quality tasks
    checkstyle {
        // do not use other packages for checkstyle, excluding gen(erated) sources
        checkstyleMain.source = "src/main/java"
        toolVersion = '8.5'
    }

    checkstyleMain.shouldRunAfter test
    checkstyleTest.shouldRunAfter test

    jmh {
        warmupIterations = 5
        iterations = 10
        fork = 2
    }

    dependencyUpdates {
        outputFormatter = "json"
    }

    task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
        doLast {
            def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
            assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
        }
    }

    // We have some dependencies which cannot be updated due to various reasons.
    dependencyUpdates.resolutionStrategy = {
        componentSelection {
            withModule("org.apache.pdfbox:fontbox") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /2.*/) {
                    selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
                }
            }
            withModule("org.apache.pdfbox:pdfbox") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /2.*/) {
                    selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
                }
            }
        }
    }
}
