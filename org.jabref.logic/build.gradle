import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

plugins {
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
    id "com.simonharrer.modernizer" version '1.5.0-1'
    id 'me.champeau.gradle.jmh' version '0.4.3'
    id 'net.ltgt.errorprone' version '0.0.13'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'org.junit.platform.gradle.plugin'
apply from: 'xjc.gradle'

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

dependencies {
    compile project(':org.jabref.model')

    compile 'org.json:json:20160212'

    compile 'org.antlr:antlr-runtime:3.5.2'

    // update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517
    compile 'org.apache.pdfbox:pdfbox:1.8.13'
    compile 'org.apache.pdfbox:jempbox:1.8.13'

    compile 'org.apache.commons:commons-lang3:3.6'

    compile "org.libreoffice:ridl:5.4.2"
    compile "org.libreoffice:unoil:5.4.2"

    compile 'com.github.bkromhout:java-diff-utils:2.1.1'
    compile 'info.debatty:java-string-similarity:1.0.1'

    compile 'com.google.guava:guava:24.0-jre'

    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'

    compile 'org.jsoup:jsoup:1.11.2'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'commons-io:commons-io:2.4'

    // >1.8.0-beta is required for java 9 compatibility
    compile 'org.slf4j:slf4j-api:1.8.0-beta1'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'
    runtime 'org.apache.logging.log4j:log4j-jcl:2.10.0'

    compile 'de.undercouch:citeproc-java:1.0.1'
    compile 'org.jbibtex:jbibtex:1.0.17'
    // need to use snapshots as the stable version is from 2013 and doesn't support v1.0.1 CitationStyles
    runtime 'org.citationstyles:styles:1.0.1-SNAPSHOT'
    runtime 'org.citationstyles:locales:1.0.1-SNAPSHOT'

    testCompile 'junit:junit:4.12'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0-M2'
    testRuntime 'org.junit.vintage:junit-vintage-engine:5.1.0-M2'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.10.0'
    testRuntime 'org.apache.logging.log4j:log4j-jul:2.10.0'

    checkstyle 'com.puppycrawl.tools:checkstyle:8.8'
}

dependencyUpdates {
    outputFormatter = "json"
}

// We have some dependencies which cannot be updated due to various reasons.
dependencyUpdates.resolutionStrategy = {
    componentSelection {
        withModule("org.apache.pdfbox:fontbox") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
            }
        }
        withModule("org.apache.pdfbox:pdfbox") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
            }
        }
    }
}

task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
    doLast {
        def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
        assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
    }
}

clean {
    delete "src/main/gen"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

// Test tasks
junitPlatform {
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/junitPlatformTest.exec")
    dependsOn junitPlatformTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

afterEvaluate {
    def junitPlatformTest = tasks.junitPlatformTest

    jacoco {
        toolVersion = '0.8.0'
        applyTo(junitPlatformTest)
    }

    task jacocoJunit5TestReport(type: JacocoReport) {
        executionData jacocoMerge.destinationFile
        dependsOn jacocoMerge
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

// Code quality tasks
checkstyle {
    // do not use other packages for checkstyle, excluding gen(erated) sources
    checkstyleMain.source = "src/main/java"
    toolVersion = '8.5'
}

checkstyleMain.shouldRunAfter test
checkstyleTest.shouldRunAfter test

modernizer {
    // We have more than 20 issues, which are not fixed yet. Nevertheless, we produce the modernizer output.
    // See https://github.com/andrewgaul/modernizer-maven-plugin for more information on modernizer
    failOnViolations = false
}

/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    project.version += "--snapshot--" + infoString
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}
